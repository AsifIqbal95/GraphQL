type Query{
    post(id:ID):Post
    me:User
    users(query:String):[User!]!
    posts(query:String):[Post!]!
    comments:[Comment!]!
}
type Mutation{
    createUser(data:CreateUserInput!):User!
    createPost(data:CreatePostInput!):Post!
    createComment(data:CreateComment!):Comment!
    deleteUser(id:ID!):User!
    deletePost(id:ID!):Post!
    deleteComment(id:ID!):Comment!
    updateUser(id:ID!,data:UpdateUser!):User!
    updatePost(id:ID!,data:UpdatePost!):Post!
    updateComment(id:ID!,data:UpdateComment!):Comment!
}

type Subscription{
    comment(postId:ID):CommentSubscriptionPayLoad!
    post:PostSubscriptionPayLoad!
}

type CommentSubscriptionPayLoad{
    mutation:String!
    data:Comment!
}

type PostSubscriptionPayLoad{
    mutation:String!
    data:Post!
}

input UpdateUser{
    name:String
    email:String
    age:Int
}

input UpdateComment{
    text:String
}

input CreateUserInput{
    name:String! 
    email:String!
    age:Int
}  

input UpdatePost{
    title:String
    body:String
    published:Boolean
}

input CreatePostInput{
    title:String!
    body:String!
    published:Boolean!
    author:ID!
}

input CreateComment{
    text:String!
    author:ID!
    post:ID!
}

type Comment{
    id:ID!,
    text:String
    author:User!
    post :Post!
}
type Post{
    id:ID!,
    title:String!,
    body:String!
    published:Boolean!
    author:User!
    comments:[Comment!]!
}
type User{
    id:ID!,
    name:String!,
    email:String!,
    age:Int,
    posts:[Post!]!
    comments:[Comment!]!
}